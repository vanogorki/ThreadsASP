@page "{id}"
@using Microsoft.AspNetCore.Authorization;
@using ThreadsASP.Services;
@model EditorModel
@{
    ViewBag.Title = "Edit Profile";
}

<h5 class="bg-warning text-white text-center p-2">Edit User</h5>


<form method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <input name="Id" type="hidden" value="@Model.Id"
               style="background-color:black; color:white" />
    </div>
    <div class="form-group">
        <label>User Name</label>
        <input name="UserName" class="form-control" value="@Model.UserName"
               style="background-color:black; color:white" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <input name="Email" class="form-control" value="@Model.Email"
               style="background-color:black; color:white" />
    </div>
    <div class="form-group">
        <label>New Password</label>
        <input name="Password" type="password" class="form-control" value="@Model.Password"
               style="background-color:black; color:white" />
    </div>
    <div class="form-group">
        <label>Confirm New Password</label>
        <input name="ConfirmPassword" type="password" class="form-control" value="@Model.ConfirmPassword"
               style="background-color:black; color:white"  />
    </div>
    <div class="py-2">
        <button type="submit" class="btn btn-warning">Submit</button>
        <a class="btn btn-secondary" href="/">Back</a>
    </div>
</form>


@functions {
    [Authorize]
    public class EditorModel : PageModel
    {
        private SignInManager<ApplicationUser> signInManager;

        private UserManager<ApplicationUser> UserManager;

        public EditorModel(UserManager<ApplicationUser> usrManager, SignInManager<ApplicationUser> signInManager)
        {
            this.signInManager = signInManager;
            UserManager = usrManager;
        }

        [BindProperty]
        public string Id { get; set; } = string.Empty;

        [BindProperty]
        public string UserName { get; set; } = string.Empty;

        [BindProperty]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [BindProperty]
        public string? Password { get; set; }

        [BindProperty]
        [DataType(DataType.Password)]
        public string? ConfirmPassword { get; set; }

        public async Task<IActionResult> OnGetAsync(string id)
        {
            ApplicationUser user = await UserManager.FindByIdAsync(id);
            if (user.UserName != User.Identity?.Name)
            {
                return NotFound();
            }
            Id = user.Id; UserName = user.UserName; Email = user.Email;
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                ApplicationUser user = await UserManager.FindByIdAsync(Id);
                if (Email != user.Email)
                {
                    try
                    {
                        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                        var callbackUrl = Url.Page(
                            "ConfirmEmail",
                            "OnGetAsync",
                            new { code = code, userId = user.Id },
                            protocol: HttpContext.Request.Scheme);
                        EmailService emailService = new EmailService();
                        await emailService.SendEmailAsync(Email, "Confirm your account",
                            $"Please confirm your verification by clicking on the <a href='{callbackUrl}'>link</a>");
                        user.EmailConfirmed = false;
                    }
                    catch (Exception)
                    {
                        ModelState.AddModelError("", "Invalid Email Address");
                        return Page();
                    }
                }
                user.UserName = UserName;
                user.Email = Email;
                IdentityResult result = await UserManager.UpdateAsync(user);
                if (Password != ConfirmPassword)
                {
                    ModelState.AddModelError("", "Passwords do not match");
                    return Page();
                }
                if (result.Succeeded && !String.IsNullOrEmpty(Password) && !String.IsNullOrEmpty(ConfirmPassword))
                {
                    await UserManager.RemovePasswordAsync(user);
                    result = await UserManager.AddPasswordAsync(user, Password);
                }
                if (result.Succeeded)
                {
                    await signInManager.SignOutAsync();
                    return RedirectToPage("Login");
                }
                foreach (IdentityError err in result.Errors)
                {
                    ModelState.AddModelError("", err.Description);
                }
            }
            return Page();
        }
    }
}