@page "{id}"
@model EditorModel
@{
    ViewBag.Title = "Edit Profile";
}
<div class="container">
    <h2>Edit Profile</h2>
    <div class="validation" asp-validation-summary="All"></div>

    <form method="post">
        <input name="Id" type="hidden" value="@Model.Id" />
        <input name="UserName" placeholder="Username" value="@Model.UserName" />
        <input name="FirstName" placeholder="First Name" value="@Model.FirstName" />
        <input name="LastName" placeholder="LastName" value="@Model.LastName" />
        <input name="Email" placeholder="Email" value="@Model.Email" />
        <input name="Password" placeholder="New Password" type="password" value="@Model.Password" />
        <input name="ConfirmPassword" placeholder="Confirm New Password" type="password" value="@Model.ConfirmPassword" />
        <button class="login-btn" type="submit">Save</button>
    </form>
    <a class="back-link" href="/">Back</a>
</div>




@functions {
    [Authorize]
    public class EditorModel : PageModel
    {
        private SignInManager<ApplicationUser> _signInManager;

        private UserManager<ApplicationUser> _UserManager;

        public EditorModel(UserManager<ApplicationUser> UserManager, SignInManager<ApplicationUser> signInManager)
        {
            _signInManager = signInManager;
            _UserManager = UserManager;
        }

        [BindProperty]
        public string Id { get; set; } = string.Empty;

        [BindProperty]
        public string UserName { get; set; } = string.Empty;

        [BindProperty]
        [Required]
        [MaxLength(12, ErrorMessage = "First Name is too long")]
        public string FirstName { get; set; } = string.Empty;

        [BindProperty]
        [Required]
        [MaxLength(12, ErrorMessage = "Last Name is too long")]
        public string LastName { get; set; } = string.Empty;

        [BindProperty]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [BindProperty]
        public string? Password { get; set; }

        [BindProperty]
        [DataType(DataType.Password)]
        public string? ConfirmPassword { get; set; }

        public async Task<IActionResult> OnGetAsync(string id)
        {
            ApplicationUser user = await _UserManager.FindByIdAsync(id);
            if (user.UserName != User.Identity?.Name)
            {
                return NotFound();
            }
            Id = user.Id; UserName = user.UserName;
            FirstName = user.FirstName; LastName = user.LastName; Email = user.Email;
            return Page();
        }

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                ApplicationUser user = await _UserManager.FindByIdAsync(Id);
                if (Email != user.Email)
                {
                    try
                    {
                        var code = await _UserManager.GenerateEmailConfirmationTokenAsync(user);
                        var callbackUrl = Url.Page(
                            "ConfirmEmail",
                            "OnGetAsync",
                            new { code = code, userId = user.Id },
                            protocol: HttpContext.Request.Scheme);
                        EmailService emailService = new EmailService();
                        await emailService.SendEmailAsync(Email, "Confirm your account",
                            $"Please confirm your account verification by clicking on the <a href='{callbackUrl}'>link</a>");
                        user.EmailConfirmed = false;
                    }
                    catch (Exception)
                    {
                        ModelState.AddModelError("", "Invalid Email Address");
                        return Page();
                    }
                }
                user.UserName = UserName;
                user.Email = Email;
                user.FirstName = FirstName;
                user.LastName = LastName;
                IdentityResult result = await _UserManager.UpdateAsync(user);
                if (Password != ConfirmPassword)
                {
                    ModelState.AddModelError("", "Passwords do not match");
                    return Page();
                }
                if (result.Succeeded && !String.IsNullOrEmpty(Password) && !String.IsNullOrEmpty(ConfirmPassword))
                {
                    await _UserManager.RemovePasswordAsync(user);
                    result = await _UserManager.AddPasswordAsync(user, Password);
                }
                if (result.Succeeded)
                {
                    await _signInManager.SignOutAsync();
                    return RedirectToPage("Login");
                }
                foreach (IdentityError err in result.Errors)
                {
                    ModelState.AddModelError("", err.Description);
                }
            }
            return Page();
        }
    }
}