@page
@model LoginModel
@{
    ViewBag.Title = "Log in";
}

<div class="container">
    <i class="fa-solid fa-robot"></i>
    <h2>Sign in to ThreadsASP</h2>
    <div asp-validation-summary="All" class="validation"></div>

    <form method="post">
        <input type="hidden" name="returnUrl" value="@Model.ReturnUrl" />
        <input type="text" placeholder="Username" autofocus asp-for="UserName" />
        <input type="password" placeholder="Password" asp-for="Password" />
        <button type="submit" class="login-btn">Log In</button>
    </form>

    <p>Don't have an account? <a asp-page="Signup">Sign up</a></p>
</div>


@functions {
    public class LoginModel : PageModel
    {
        private SignInManager<ApplicationUser> _signInManager;
        private UserManager<ApplicationUser> _UserManager;

        public LoginModel(SignInManager<ApplicationUser> signInManager,
            UserManager<ApplicationUser> UserManager)
        {
            _signInManager = signInManager;
            _UserManager = UserManager;
        }

        [BindProperty]
        public string UserName { get; set; } = string.Empty;

        [BindProperty]
        public string Password { get; set; } = string.Empty;

        [BindProperty(SupportsGet = true)]
        public string? ReturnUrl { get; set; }


        [ValidateAntiForgeryToken]
        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                var user = await _UserManager.FindByNameAsync(UserName);
                if (user != null)
                {
                    if (user.IsBlocked == true)
                    {
                        ModelState.AddModelError("", "Your account is blocked. Contact support for more information threadsasp@gmail.com");
                        return Page();
                    }
                    if (!await _UserManager.IsEmailConfirmedAsync(user))
                    {
                        ModelState.AddModelError("", "You didn't verify your email");
                        return Page();
                    }
                }

                Microsoft.AspNetCore.Identity.SignInResult result =
                await _signInManager.PasswordSignInAsync(UserName, Password,
                false, false);
                if (result.Succeeded)
                {
                    return Redirect(ReturnUrl ?? "/");
                }
                ModelState.AddModelError("", "Invalid username or password");
            }
            return Page();
        }
    }
}

