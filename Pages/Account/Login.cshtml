@page
@using Microsoft.AspNetCore.Authorization;
@model LoginModel
@{
    ViewBag.Title = "Log in";
}

<div class="bg-primary text-center text-white p-2"><h4>Log In</h4></div>
<div class="m-1 text-danger" asp-validation-summary="All"></div>
<form method="post">
    <input type="hidden" name="returnUrl" value="@Model.ReturnUrl" />
    <div class="form-group">
        <label>Username</label>
        <input style="background-color:black; color:white"
            class="form-control black-back" asp-for="UserName" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <input style="background-color:black; color:white"
            asp-for="Password" type="password" class="form-control" />
    </div>
    <button class="btn btn-primary mt-2" type="submit">Log In</button>
    <a class="btn btn-secondary mt-2" asp-page="Signup">Sign Up</a>
</form>


@functions {
    public class LoginModel : PageModel
    {
        private SignInManager<ApplicationUser> _signInManager;
        private UserManager<ApplicationUser> _UserManager;

        public LoginModel(SignInManager<ApplicationUser> signInManager,
            UserManager<ApplicationUser> UserManager)
        {
            _signInManager = signInManager;
            _UserManager = UserManager;
        }

        [BindProperty]
        public string UserName { get; set; } = string.Empty;
        
        [BindProperty]
        public string Password { get; set; } = string.Empty;
        
        [BindProperty(SupportsGet = true)]
        public string? ReturnUrl { get; set; }


        [ValidateAntiForgeryToken]
        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                var user = await _UserManager.FindByNameAsync(UserName);
                if (user != null)
                {
                    // проверяем, подтвержден ли email
                    if (!await _UserManager.IsEmailConfirmedAsync(user))
                    {
                        ModelState.AddModelError("", "You didn't verify your email");
                        return Page();
                    }
                }

                Microsoft.AspNetCore.Identity.SignInResult result =
                await _signInManager.PasswordSignInAsync(UserName, Password,
                false, false);
                if (result.Succeeded)
                {
                    return Redirect(ReturnUrl ?? "/");
                }
                ModelState.AddModelError("", "Invalid username or password");
            }
            return Page();
        }
    }
}