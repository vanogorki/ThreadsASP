@page
@using System.Web;
@using ThreadsASP.Services;
@model SignupModel
@{
    ViewBag.Title = "Sign up";
}

<h5 class="bg-primary text-white text-center p-2">Sign Up</h5>
<form method="post">
    <div asp-validation-summary="All" class="text-danger"></div>
    <div class="form-group">
        <label>Username</label>
        <input style="background-color:black; color:white"
               name="UserName" class="form-control" value="@Model.UserName" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <input style="background-color:black; color:white"
               name="Email" class="form-control" value="@Model.Email" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <input style="background-color:black; color:white"
               name="Password" class="form-control" value="@Model.Password"
               type="password" />
    </div>
    <div class="form-group">
        <label>Confirm Password</label>
        <input style="background-color:black; color:white"
               name="ConfirmPassword" class="form-control" value="@Model.ConfirmPassword"
               type="password" />
    </div>
    <div class="py-2">
        <button type="submit" class="btn btn-primary">Submit</button>
        <a class="btn btn-secondary" asp-page="Login">Back</a>
    </div>
</form>


@functions {
    public class SignupModel : PageModel
    {
        private UserManager<ApplicationUser> _UserManager;

        public SignupModel(UserManager<ApplicationUser> UserManager)
        {
            _UserManager = UserManager;
        }

        [BindProperty]
        public string UserName { get; set; } = string.Empty;

        [BindProperty]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [BindProperty]
        public string Password { get; set; } = string.Empty;

        [BindProperty]
        [Required(ErrorMessage = "Confirm Password Is Required")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                ApplicationUser user =
                new ApplicationUser { UserName = UserName, Email = Email };
                IdentityResult result =
                await _UserManager.CreateAsync(user, Password);
                if (result.Succeeded)
                {
                    try
                    {
                        var code = await _UserManager.GenerateEmailConfirmationTokenAsync(user);
                        var callbackUrl = Url.Page(
                            "ConfirmEmail",
                            "OnGetAsync",
                            new { code = code, userId = user.Id },
                            protocol: HttpContext.Request.Scheme);
                        EmailService emailService = new EmailService();
                        await emailService.SendEmailAsync(Email, "Confirm your account",
                            $"Please confirm your account registration by clicking on the <a href='{callbackUrl}'>link</a>");

                        return Content("Check your email to complete the registration");
                    }
                    catch (Exception)
                    {
                        ModelState.AddModelError("", "Invalid Email Address");
                        return Page();
                    }
                }
                foreach (IdentityError err in result.Errors)
                {
                    ModelState.AddModelError("", err.Description);
                }
            }
            return Page();
        }
    }
}