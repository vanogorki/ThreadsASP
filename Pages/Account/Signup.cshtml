@page
@model SignupModel
@{
    ViewBag.Title = "Sign up";
}

<div class="container">
    <h2>Create your account</h2>
    <div asp-validation-summary="All" class="validation"></div>

    <form method="post">
        <input type="text" placeholder="Username" name="UserName" value="@Model.UserName" autofocus />
        <input type="text" placeholder="First Name" name="FirstName" value="@Model.FirstName" />
        <input type="text" placeholder="Last Name" name="LastName" value="@Model.LastName" />
        <input type="email" placeholder="Email" name="Email" value="@Model.Email" />
        <input type="password" placeholder="Password" name="Password" value="@Model.Password" />
        <input type="password" placeholder="Confirm Password" name="ConfirmPassword" value="@Model.ConfirmPassword" />
        <button type="submit" class="login-btn">Sign up</button>
    </form>
</div>


@functions {
    public class SignupModel : PageModel
    {
        private UserManager<ApplicationUser> _UserManager;
        private IUserRepository _userRepository;

        public SignupModel(UserManager<ApplicationUser> UserManager, IUserRepository userRepository)
        {
            _UserManager = UserManager;
            _userRepository = userRepository;
        }

        [BindProperty]
        [Required]
        [MaxLength(14, ErrorMessage = "Username is too long")]
        public string UserName { get; set; } = string.Empty;

        [BindProperty]
        [Required]
        [MaxLength(12, ErrorMessage = "First Name is too long")]
        public string FirstName { get; set; }

        [BindProperty]
        [Required]
        [MaxLength(12, ErrorMessage = "Last Name is too long")]
        public string LastName { get; set; }

        [BindProperty]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [BindProperty]
        public string Password { get; set; } = string.Empty;

        [BindProperty]
        [Required(ErrorMessage = "Confirm Password Is Required")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;

        public async Task<IActionResult> OnPostAsync()
        {
            if (ModelState.IsValid)
            {
                ApplicationUser user =
                new ApplicationUser { UserName = UserName, Email = Email };
                IdentityResult result =
                await _UserManager.CreateAsync(user, Password);
                user.FirstName = FirstName;
                user.LastName = LastName;
                _userRepository.SaveNewProfileData();

                if (result.Succeeded)
                {
                    try
                    {
                        var code = await _UserManager.GenerateEmailConfirmationTokenAsync(user);
                        var callbackUrl = Url.Page(
                            "ConfirmEmail",
                            "OnGetAsync",
                            new { code = code, userId = user.Id },
                            protocol: HttpContext.Request.Scheme);
                        EmailService emailService = new EmailService();
                        await emailService.SendEmailAsync(Email, "Confirm your account",
                            $"Please confirm your account registration by clicking on the <a href='{callbackUrl}'>link</a>");

                        return Redirect("http://localhost:5000/account/message");
                    }
                    catch (Exception)
                    {
                        ModelState.AddModelError("", "Invalid Email Address");
                        return Page();
                    }
                }
                foreach (IdentityError err in result.Errors)
                {
                    ModelState.AddModelError("", err.Description);
                }
            }
            return Page();
        }
    }
}